@model e_commerce.Infrastructure.Entites.Return

@{
    ViewData["Title"] = "Create";
}

@{
    ViewData["Title"] = "Create Return";
}
<h2>Add Return Request</h2>

<form asp-action="Create" method="post" class="form-container">
    <div  class="form-group">
        <label for="OrderId" class="form-title">Choose Order</label>
        <select class="form-control" id="OrderId" name="OrderId" asp-items="ViewBag.OrderId">
            <option value="">-- Choose Order --</option>
        </select>
    </div>

    <div id="returnItemsContainer" class="mt-3"></div>

    <div>
        <a class="btn-success d-none" id="addItemBtn">
            <i class="fa-solid fa-square-plus fa-2xl" style="color: #d987bb;"></i> 
        </a>
    </div>

    <div>
        <button type="submit" class="btn btn-primary">Save</button>
        <a class=" btn btn-primary" asp-action="returnsIndexForm">Back to List</a>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        let selectedProducts = [];
        let allProducts = []; // Store all products for the order

        $('#OrderId').on('change', function () {
            $('#returnItemsContainer').html('');
            selectedProducts = [];
            const orderId = $(this).val();

            if (!orderId) {
                $('#addItemBtn').addClass('d-none');
                return;
            }

            $('#addItemBtn').removeClass('d-none');
            loadInitialProducts(orderId); // Load products but don't create a row yet
        });

        function loadInitialProducts(orderId) {
            $.ajax({
                url: '/returns/GetProductsByOrderId',
                type: 'GET',
                data: { orderId },
                success: function (products) {
                    if (!products || !Array.isArray(products)) {
                        alert("Failed to load products. Please check the Order ID.");
                        return;
                    }
                    allProducts = products; // Store all products
                }
            });
        }

        $('#addItemBtn').on('click', function () {
            const orderId = $('#OrderId').val();
            if (!orderId) return;

            // Filter available products
            const availableProducts = allProducts.filter(p =>
                !selectedProducts.includes(p.productId.toString())
            );

            if (availableProducts.length === 0) {
                alert("All products are already selected.");
                return;
            }

            createProductRow(availableProducts);
        });

        function createProductRow(availableProducts) {
            let productOptions = '<option value="">-- Select Product --</option>';
            availableProducts.forEach(p => {
                productOptions += `<option value="${p.productId}">${p.name}</option>`;
            });

            const row = $(`
                <div class="return-item row mb-2">
                    <div class="col-md-5">
                        <select name="ProductId" class="form-control product-select">
                            ${productOptions}
                        </select>
                    </div>
                    <div class="col-md-5">
                        <input type="text" name="Reason" class="form-control" placeholder="Reason for return" required />
                    </div>
                    <div class="col-md-2">
                       <i class="fa-solid fa-trash fa-2xl remove-item" style="color: #e26fb2;"></i>
                    </div>
                </div>
            `);

            row.find('.product-select').on('change', function () {
                const selectedVal = $(this).val();
                if (selectedVal) {
                    // Update selected products
                    selectedProducts = $('.product-select').map(function() {
                        return $(this).val();
                    }).get().filter(Boolean);
                }
            });

            row.find('.remove-item').on('click', function () {
                const val = row.find('.product-select').val();
                selectedProducts = selectedProducts.filter(p => p !== val);
                row.remove();
            });

            $('#returnItemsContainer').append(row);
        }
    </script>
}
